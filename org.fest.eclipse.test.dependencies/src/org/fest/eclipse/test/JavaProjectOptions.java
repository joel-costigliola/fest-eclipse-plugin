package org.fest.eclipse.test;

import static com.google.common.collect.Maps.newHashMap;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.jdt.core.IJavaProject;

public class JavaProjectOptions {

  private static Map<String, String> DEFAULT_OPTIONS = new HashMap<String, String>();
  static {
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.builder.cleanOutputFolder", "clean");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.builder.duplicateResourceTask", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.builder.invalidClasspath", "abort");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.builder.recreateModifiedClassFileInOutputFolder", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.builder.resourceCopyExclusionFilter", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.circularClasspath", "error");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.classpath.exclusionPatterns", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.classpath.multipleOutputLocations", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.classpath.outputOverlappingAnotherSource", "error");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.argumentPrefixes", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.argumentSuffixes", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.camelCaseMatch", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.deprecationCheck", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.discouragedReferenceCheck", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.fieldPrefixes", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.fieldSuffixes", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.forbiddenReferenceCheck", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.forceImplicitQualification", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.localPrefixes", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.localSuffixes", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.staticFieldPrefixes", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.staticFieldSuffixes", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.staticFinalFieldPrefixes", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.staticFinalFieldSuffixes", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.suggestStaticImports", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.codeComplete.visibilityCheck", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.annotation.nonnull", "org.eclipse.jdt.annotation.NonNull");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.annotation.nonnullbydefault", "org.eclipse.jdt.annotation.NonNullByDefault");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.annotation.nullable", "org.eclipse.jdt.annotation.Nullable");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.annotation.nullanalysis", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.5");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.codegen.unusedLocal", "preserve");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.compliance", "1.5");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.debug.lineNumber", "generate");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.debug.localVariable", "generate");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.debug.sourceFile", "generate");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.doc.comment.support", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.generateClassFiles", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.groovy.groovyTransformsToRunOnReconcile", "");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.maxProblemPerUnit", "100");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.annotationSuperInterface", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.assertIdentifier", "error");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.autoboxing", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.comparingIdentical", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.deadCode", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.deadCodeInTrivialIfStatement", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.deprecation", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.discouragedReference", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.emptyStatement", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.enumIdentifier", "error");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.fallthroughCase", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.fatalOptionalError", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.fieldHiding", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.finalParameterBound", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.forbiddenReference", "error");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.indirectStaticAccess", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.invalidImport", "error");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.invalidJavadoc", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.invalidJavadocTags", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsDeprecatedRef", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsNotVisibleRef", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility", "public");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.localVariableHiding", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.methodWithConstructorName", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingDefaultCase", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingJavadocComments", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsVisibility", "public");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingJavadocTagDescription", "return_tag");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingJavadocTags", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsMethodTypeParameters", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility", "public");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingSerialVersion", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.noEffectAssignment", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict", "error");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.nullReference", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.nullSpecViolation", "error");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.parameterAssignment", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.potentialNullReference", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.rawTypeReference", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.redundantNullCheck", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.redundantSuperinterface", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.specialParameterHidingField", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.staticAccessReceiver", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.suppressWarnings", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.tasks", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.typeParameterHiding", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unclosedCloseable", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unhandledWarningToken", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unnecessaryElse", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unreachableCode", "error");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedImport", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedLabel", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedLocal", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedParameter", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedPrivateMember", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedTypeArgumentsForMethodInvocation", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.unusedWarningToken", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast", "warning");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.processAnnotations", "disabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.source", "1.5");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.taskCaseSensitive", "enabled");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.taskPriorities", "NORMAL,HIGH,NORMAL");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.compiler.taskTags", "TODO,FIXME,XXX");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.computeJavaBuildOrder", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.encoding", "UTF-8");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.align_type_members_on_columns", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation", "0");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_assignment", "0");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_binary_expression", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_compact_if", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_conditional_expression", "80");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_enum_constants", "0");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_method_declaration", "0");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_multiple_fields", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_resources_in_try", "80");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch", "16");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_after_imports", "1");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_after_package", "1");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_before_field", "0");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration", "0");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_before_imports", "1");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_before_member_type", "1");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_before_method", "1");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk", "1");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_before_package", "0");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_between_import_groups", "1");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations", "1");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_array_initializer", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_block", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_block_in_case", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_enum_constant", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_method_declaration", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_switch", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.brace_position_for_type_declaration", "end_of_line");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.format_block_comments", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.format_header", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.format_html", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.format_javadoc_comments", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.format_line_comments", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.format_source_code", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.indent_parameter_description", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.indent_root_tags", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.line_length", "80");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.compact_else_if", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.continuation_indentation", "2");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer", "2");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.disabling_tag", "@formatter:off");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.enabling_tag", "@formatter:on");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indent_empty_lines", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indent_statements_compare_to_block", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indent_statements_compare_to_body", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.indentation.size", "4");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_after_label", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_binary_operator", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_ellipsis", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_after_unary_operator", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_binary_operator", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_ellipsis", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional", "insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_semicolon", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_before_unary_operator", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation", "do not insert");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.join_lines_in_comments", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.join_wrapped_lines", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.lineSplit", "500");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body", "0");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve", "1");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.tabulation.char", "tab");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.tabulation.size", "4");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.use_on_off_tags", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations", "false");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.wrap_before_binary_operator", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested", "true");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.incompatibleJDKLevel", "ignore");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.incompleteClasspath", "error");
    DEFAULT_OPTIONS.put("org.eclipse.jdt.core.timeoutForParameterNameFromAttachedJavadoc", "50");
  }

  public static JavaProjectOptions defaults() {
    return new JavaProjectOptions();
  }

  private final Map<String, String> options = newHashMap(DEFAULT_OPTIONS);

  private JavaProjectOptions() {
  }

  public JavaProjectOptions with(String option, String value) {
    options.put(option, value);
    return this;
  }

  public Map<String, String> get() {
    return options;
  }

  public void applyTo(IJavaProject project) {
    project.setOptions(options);
  }
}
